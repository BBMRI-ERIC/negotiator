import{_ as s,c as t,a3 as a,o as i}from"./chunks/framework.D6X87co3.js";const k=JSON.parse('{"title":"Deployment","description":"","frontmatter":{},"headers":[],"relativePath":"deployment.md","filePath":"deployment.md","lastUpdated":1751450357000}'),n={name:"deployment.md"};function o(r,e,p,l,h,d){return i(),t("div",null,e[0]||(e[0]=[a(`<h1 id="deployment" tabindex="-1">Deployment <a class="header-anchor" href="#deployment" aria-label="Permalink to &quot;Deployment&quot;">​</a></h1><p>The preferred deployment method is via Docker containers and Docker Compose. Manual deployment of a JAR file is also possible, though it is not officially supported.</p><p>All our Docker containers run as non-root users, and the Dockerfiles are available publicly for validation. Customization is handled through environment variables, more details are in the <a href="#configuration">Configuration</a> section.</p><p>For all deployments, an OIDC authentication server is required, such as <a href="https://www.keycloak.org/" target="_blank" rel="noreferrer">Keycloak</a>. Many life science research infrastructures can alternatively use <a href="https://lifescience-ri.eu/ls-login/" target="_blank" rel="noreferrer">LifeScience Login</a> as their OIDC provider. For eligibility and support, please <a href="https://lifescience-ri.eu/ls-login/" target="_blank" rel="noreferrer">contact LifeScience Login</a>.</p><p>For more details on how the Negotiator manages OIDC connections, refer to <a href="/auth">Authentication and Authorization</a>.</p><h2 id="docker-compose" tabindex="-1">Docker Compose <a class="header-anchor" href="#docker-compose" aria-label="Permalink to &quot;Docker Compose&quot;">​</a></h2><p>For example, deployment using Docker Compose, see the provided <a href="https://github.com/BBMRI-ERIC/negotiator/blob/docs/overhaul/compose.yml" target="_blank" rel="noreferrer">Compose file</a>. This example includes Traefik as a reverse proxy.</p><p>Please note, however, that this Compose file is intended only for development and testing, as it uses an OIDC server configured for non-production environments. For production setups, refer to the documentation for recommended configurations.</p><h2 id="https" tabindex="-1">HTTPS <a class="header-anchor" href="#https" aria-label="Permalink to &quot;HTTPS&quot;">​</a></h2><p>For enabling HTTPS you need to setup a reverse proxy like <a href="https://doc.traefik.io/traefik/getting-started/install-traefik/" target="_blank" rel="noreferrer">Traefik</a> or <a href="https://nginx.org/en/" target="_blank" rel="noreferrer">Nginx</a>.</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">traefik</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  image</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">traefik:v3.2.0</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  container_name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">traefik</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  network_mode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">host</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # Use host network</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  command</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;--providers.docker=true&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;--entrypoints.websecure.address=:443&quot;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      # HTTPS entrypoint only</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;--entrypoints.websecure.http.tls=true&quot;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">     # Enable TLS for HTTPS</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;--entrypoints.websecure.http.tls.certificates.certFile=/certs/cert.pem&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;--entrypoints.websecure.http.tls.certificates.keyFile=/certs/key.pem&quot;</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  volumes</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/var/run/docker.sock:/var/run/docker.sock</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">./certs:/certs</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # Folder with provided SSL certificates</span></span></code></pre></div><p>and adding following lables to any containers theat should be exposed:</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">- </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;traefik.http.routers.negotiator-api.entrypoints=websecure&quot;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # Only HTTPS</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">- </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;traefik.http.routers.negotiator-api.tls=true&quot;</span></span></code></pre></div><h2 id="configuration" tabindex="-1">Configuration <a class="header-anchor" href="#configuration" aria-label="Permalink to &quot;Configuration&quot;">​</a></h2><p>Both the frontend and backend are customizable via environment variables, which can be specified in the Compose file. Since the backend is a Spring application, all properties can also be passed as environment variables. For example, a property can be defined as follows:</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">logging</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  level</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    root</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">info</span></span></code></pre></div><p>Can be passed to a docker container as:</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  negotiator</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    container_name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">negotiator</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    image</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">bbmrieric/negotiator:latest</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    environment</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">LOGGING_LEVEL_ROOT=info</span></span></code></pre></div><p>To customize a Docker deployment, you can provide variables in the format mentioned above. For a comprehensive list of properties you may want to modify, refer to the <a href="https://github.com/BBMRI-ERIC/negotiator/blob/master/backend/src/main/resources/application-prod.yaml" target="_blank" rel="noreferrer">application file</a>.</p><h3 id="custom-properties" tabindex="-1">Custom properties <a class="header-anchor" href="#custom-properties" aria-label="Permalink to &quot;Custom properties&quot;">​</a></h3><table tabindex="0"><thead><tr><th>Environment Variable</th><th>Description</th><th>Default Value</th></tr></thead><tbody><tr><td><code>NEGOTIATOR_FRONTENDURL</code></td><td>URL for the Negotiator frontend.</td><td><code>&quot;&quot;</code></td></tr><tr><td><code>NEGOTIATOR_EMAIL_YOURSSINCERELYTEXT</code></td><td>Closing text for emails sent from the Negotiator.</td><td><code>&quot;The BBMRI-ERIC Team&quot;</code></td></tr><tr><td><code>NEGOTIATOR_EMAIL_HELPDESKHREF</code></td><td>Helpdesk email link.</td><td><code>&quot;mailto:negotiator@helpdesk.bbmri-eric.eu&quot;</code></td></tr><tr><td><code>NEGOTIATOR_EMAIL_LOGO</code></td><td>URL for the Negotiator logo image.</td><td><code>&quot;https://web.bbmri-eric.eu/Negotiator/2023-BBMRI-ERIC-Logo_NEGOTIATOR.png&quot;</code></td></tr><tr><td><code>NEGOTIATOR_AUTHORIZATION_CLAIM</code></td><td>Claim used for authorization.</td><td><code>&quot;eduperson_entitlement&quot;</code></td></tr><tr><td><code>NEGOTIATOR_AUTHORIZATION_ADMINCLAIMVALUE</code></td><td>Claim value for admin users.</td><td><code>&quot;&quot;</code></td></tr><tr><td><code>NEGOTIATOR_AUTHORIZATION_RESEARCHERCLAIMVALUE</code></td><td>Claim value for researcher users.</td><td><code>&quot;&quot;</code></td></tr><tr><td><code>NEGOTIATOR_AUTHORIZATION_BIOBANKERCLAIMVALUE</code></td><td>Claim value for biobanker users.</td><td><code>&quot;&quot;</code></td></tr><tr><td><code>NEGOTIATOR_NOTIFICATION_REMINDERCRONEXPRESSION</code></td><td>Cron expression for reminder notifications.</td><td><code>&quot;0 0 6 * * *&quot;</code></td></tr><tr><td><code>NEGOTIATOR_EMAIL_FREQUENCYCRONEXPRESSION</code></td><td>Cron expression for email frequency.</td><td><code>&quot;0 0 * * * *&quot;</code></td></tr></tbody></table><h2 id="life-science-login-integration" tabindex="-1">Life science Login Integration <a class="header-anchor" href="#life-science-login-integration" aria-label="Permalink to &quot;Life science Login Integration&quot;">​</a></h2><p>To setup <a href="https://lifescience-ri.eu/ls-login/documentation/service-provider-documentation/service-provider-documentation.html" target="_blank" rel="noreferrer">LS Login</a> as the OIDC provider you need to register a client that uses the <strong>authorization_code flow with PKCE</strong>. If you also want to take advantage of Token introspection, you will need to setup a second client for the backend that uses the <strong>client_credentials flow</strong> with similar settings as the UI client except the flow. To correctly parse User roles from the userinfo response you will need to setup respective groups in <a href="https://perun.aai.lifescience-ri.eu/home" target="_blank" rel="noreferrer">LS-Login IAM system</a>. Please refer to their documentation or support on how to do that. Below you can find examples configuration used by BBMRI-ERIC for the UI client:</p><p><strong>Redirect URLs</strong>:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>https://negotiator.bbmri-eric.eu/logged-in</span></span>
<span class="line"><span>https://negotiator.bbmri-eric.eu/api/swagger-ui/oauth2-redirect.html</span></span></code></pre></div><p><strong>Scopes:</strong></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>openid</span></span>
<span class="line"><span>profile</span></span>
<span class="line"><span>email</span></span>
<span class="line"><span>offline_access</span></span>
<span class="line"><span>eduperson_entitlement</span></span>
<span class="line"><span>negotiator_api</span></span>
<span class="line"><span>eduperson_orcid</span></span></code></pre></div><p><strong>Resource Indicators:</strong></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>https://negotiator.bbmri-eric.eu</span></span></code></pre></div><h2 id="monitoring" tabindex="-1">Monitoring <a class="header-anchor" href="#monitoring" aria-label="Permalink to &quot;Monitoring&quot;">​</a></h2><p>The Negotiator by default exposes a <a href="https://prometheus.io/" target="_blank" rel="noreferrer">Prometheus</a> endpoint for scraping metrics over HTTP. See <a href="https://docs.spring.io/spring-boot/reference/actuator/metrics.html#actuator.metrics.export.prometheus" target="_blank" rel="noreferrer">Spring documentation</a> for a more in depth description.</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>GET /api/actuator/prometheus</span></span></code></pre></div><p>Access to this endpoint requires authorization with a token that includes the <strong><em>negotiator_monitoring</em></strong> scope. For simple overview we recommend to integrate prometheus with Grafana and use a Springboot app <a href="https://grafana.com/grafana/dashboards/11378-justai-system-monitor/" target="_blank" rel="noreferrer">dashboard</a>.</p>`,33)]))}const g=s(n,[["render",o]]);export{k as __pageData,g as default};
