import{_ as a,c as t,a3 as i,o as n}from"./chunks/framework.D6X87co3.js";const o="/assets/negotiation_state_machine.A9TJli2O.png",p=JSON.parse('{"title":"Negotiation lifecycle management","description":"","frontmatter":{},"headers":[],"relativePath":"lifecycle.md","filePath":"lifecycle.md","lastUpdated":1751450357000}'),r={name:"lifecycle.md"};function l(c,e,s,h,f,m){return n(),t("div",null,e[0]||(e[0]=[i('<h1 id="negotiation-lifecycle-management" tabindex="-1">Negotiation lifecycle management <a class="header-anchor" href="#negotiation-lifecycle-management" aria-label="Permalink to &quot;Negotiation lifecycle management&quot;">​</a></h1><ul><li><a href="#negotiation-lifecycle-management">Negotiation lifecycle management</a><ul><li><a href="#intro">Intro</a></li><li><a href="#usage">Usage</a></li><li><a href="#implementation">Implementation</a><ul><li><a href="#configuration">Configuration</a></li></ul></li></ul></li></ul><h2 id="intro" tabindex="-1">Intro <a class="header-anchor" href="#intro" aria-label="Permalink to &quot;Intro&quot;">​</a></h2><p>The Negotiator features mechanisms for 2 finite state machines. One for manipulating the lifecycle of each Negotiation, and the second one is for managing the lifecycle of individual Resources that are a part of a Negotiation. Here is an example of what a basic state machine in the context of Negotiation Lifecycle can look like:</p><p><img src="'+o+'" alt="State machine example"></p><h2 id="usage" tabindex="-1">Usage <a class="header-anchor" href="#usage" aria-label="Permalink to &quot;Usage&quot;">​</a></h2><p>Interactions with the state machine are currently handled only via the REST API. This means that the entire lifecycle is represented in a machine-readable way enabling automated interactions.</p><h2 id="implementation" tabindex="-1">Implementation <a class="header-anchor" href="#implementation" aria-label="Permalink to &quot;Implementation&quot;">​</a></h2><p>The Negotiator uses the <a href="https://docs.spring.io/spring-statemachine/docs/current/reference/#preface" target="_blank" rel="noreferrer">Spring state machine framework</a> for handling the exact implementation of the workflow engine. Updating of the appropriate entities is handled by following the <a href="https://docs.spring.io/spring-statemachine/docs/current/reference/#statemachine-recipes-persist" target="_blank" rel="noreferrer">Persist</a> recipe/pattern.</p><h3 id="configuration" tabindex="-1">Configuration <a class="header-anchor" href="#configuration" aria-label="Permalink to &quot;Configuration&quot;">​</a></h3><p>Currently, the configuration for the Negotiation lifecycle workflow is hardcoded in <code>NegotiationStateMachineConfig.java</code>.</p>',11)]))}const d=a(r,[["render",l]]);export{p as __pageData,d as default};
