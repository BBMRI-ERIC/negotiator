import{_ as a,c as t,a3 as i,o as s}from"./chunks/framework.D6X87co3.js";const d=JSON.parse('{"title":"Logging","description":"","frontmatter":{},"headers":[],"relativePath":"logging.md","filePath":"logging.md","lastUpdated":1751450357000}'),n={name:"logging.md"};function o(l,e,r,g,h,p){return s(),t("div",null,e[0]||(e[0]=[i('<h1 id="logging" tabindex="-1">Logging <a class="header-anchor" href="#logging" aria-label="Permalink to &quot;Logging&quot;">​</a></h1><p>The Negotiator uses <strong>Logback</strong> to handle logging.</p><h2 id="default-configuration" tabindex="-1">Default Configuration <a class="header-anchor" href="#default-configuration" aria-label="Permalink to &quot;Default Configuration&quot;">​</a></h2><p>Logback is configured, among other settings, in the <strong><code>application.yaml</code></strong> file.</p><p>By default, the <strong>development</strong> environment is configured to output logs only to the console, and the logging level is set to <strong>DEBUG</strong>. For the <strong>production</strong> profile, the logging level is set to <strong>INFO</strong>.</p><p>For production environments, the default configuration can be found in the <a href="https://github.com/BBMRI-ERIC/negotiator/blob/master/backend/src/main/resources/application-prod.yaml" target="_blank" rel="noreferrer">application file</a>.</p><p>The configuration uses a <strong>SizeAndTimeBasedRollingPolicy</strong>, which keeps the default time range (i.e., 1 day). This means a new log file will be created each day. If the log file reaches the maximum file size (10MB) before the day ends, a new log file is created, and the previous one is archived.</p><p>The file name pattern for logs is: <strong><code>negotiator.log.%d{%YYY-MM-dd}.%i.cz</code></strong></p><p>To control storage consumption, the <strong>max-history</strong> parameter is configured to <strong>30</strong> (i.e., logs are retained for one month), meaning that logs older than 30 days will be deleted automatically.</p><p>All configuration parameters can be overridden using environment variables.</p><p>By default, logs are stored in the <strong><code>/var/log/negotiator/</code></strong> directory.</p><h2 id="accessing-logs" tabindex="-1">Accessing Logs <a class="header-anchor" href="#accessing-logs" aria-label="Permalink to &quot;Accessing Logs&quot;">​</a></h2><p>To view the logs from a running <strong>Docker</strong> container, you can use the following command:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> logs</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">container_name_or_i</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">d</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span></code></pre></div><p>Viewing Container Stats</p><p>To view the resource usage and stats of a running Docker container, such as CPU and memory usage, you can use the docker stats command:</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> stats</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">container_name_or_i</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">d</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span></code></pre></div><h2 id="customizing-log-level-through-environment-variables" tabindex="-1">Customizing Log Level through Environment Variables <a class="header-anchor" href="#customizing-log-level-through-environment-variables" aria-label="Permalink to &quot;Customizing Log Level through Environment Variables&quot;">​</a></h2><p>In Spring applications, you can customize the log level dynamically through environment variables. This is particularly useful when deploying to different environments (e.g., development, staging, production). To change the log level, you can set the property in the environment.</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">logging.level.&lt;logger_name&gt;</span></span></code></pre></div><p>For example, to set the log level for the root logger to <strong>DEBUG</strong>, you can use the environment variable:</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">LOGGING_LEVEL_ROOT=DEBUG</span></span></code></pre></div><p>Similarly, you can customize the log level for specific packages or classes by specifying the package or class name. For instance, to set the log level for the <strong>com.example</strong> package to <strong>INFO</strong>, use</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">LOGGING_LEVEL_COM_EXAMPLE=INFO</span></span></code></pre></div><p>These environment variables can be passed in the <strong>Docker Compose</strong> file or directly to the application at runtime, allowing you to fine-tune logging without modifying application configuration files.</p>',25)]))}const u=a(n,[["render",o]]);export{d as __pageData,u as default};
